{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # include <stdarg.h>\
# include <unistd.h>\
# include <stdlib.h>\
# include <stdio.h>\
\
# define FLAGS "-0.+ #"\
# define SET "cspdiuxX%"\
\
typedef struct    s_flags\
\{\
    va_list    ap;\
    int        dot;\
    int        sharp;\
    int        space;\
    int        sign;\
    int        width;\
    int        precision;\
    int        length;\
    int        percent;\
\}                t_flags;\
\
t_flags    *ft_init_flags(t_flags *flags)\
\{\
    flags->dot = 0;\
    flags->sharp = 0;\
    flags->space = 0;\
    flags->sign = 0;\
    flags->width = 0;\
    flags->precision = 0;\
    flags->length = 0;\
    flags->percent = 0;\
\
    return (flags);\
\}\
\
char    ft_eval_fmt(const char *s, t_flags *f, int i)\
\{\
    while (s[i] != 'c' || s[i] != 's' || s[i] != 'p' || s[i] != 'd' \
            || s[i] != 'i' || s[i] != 'u' || s[i] != 'x' || s[i] != 'X' \
            || s[i] != '%')\
            //|| s[i] != 'i' || s[i] != 'u' || s[i] != 'x' || s[i] != 'X')\
    \{\
        if (s[i] == '.')\
        \{\
            f->dot = 1;\
            i++;\
        \}\
        if (s[i] == '#')\
        \{\
            f->sharp = 1;\
            i++;\
        \}\
        if (s[i] == ' ')\
        \{\
            f->space = 1;\
            i++;\
        \}\
        if (s[i] == '+')\
        \{\
            f->sign = 1;\
            i++;\
        \}\
        if (s[i] >= '0' && s[i] <= '9' && f->dot == 0)\
        \{\
            f->width = f->width * 10 + (s[i] - 0);\
            i++;\
        \}\
        if (s[i] >= '0' && s[i] <= '9' && f->dot == 1)\
        \{\
            f->precision = f->precision * 10 + (s[i] - 0);\
            i++;\
        \}\
    \}\
    return (s[i]);\
\}\
\
int    ft_printf(const char *fmt, ...)\
\{\
    t_flags    *flags;\
    int        result;\
    int        i;\
\
    flags = malloc(sizeof(*flags));\
    if (!flags)\
        return (0x0);\
\
    ft_init_flags(flags);\
\
    va_start(flags->ap, fmt);\
    i = -1;\
    result = 0;\
    while (fmt[++i])\
    \{\
        if (fmt[i] == '%')\
        \{\
            ft_eval_fmt(fmt, flags, i + 1);\
        \}\
        else\
            result += write(1, &fmt[i], 1);\
            //ft_putchar_fd(*fmt, 1);\
        //fmt++;\
    \}\
    va_end(flags->ap);\
    result += flags->length;\
    free(flags);\
    return (result);\
\}\
\
int main() \{\
    int        res2 = ft_printf("Hello %%\\n");\
    printf("res2 = %d\\n", res2);\
\
  return 0;\
\}}